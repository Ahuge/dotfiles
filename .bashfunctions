#!/bin/bash

function md_pdf() {
    MD=${1:-README.md}
    PDF=${2:-"$MD".pdf}
    PORT=8971
    DELAY=10

    printf "Converting $MD to $PDF on port $PORT\n"
    printf "Waiting $DELAY seconds for server to start...\n"

    grip "$MD" localhost:$PORT &
    sleep $DELAY
    wkhtmltopdf http://localhost:$PORT "$PDF"
    kill $(ps -eo pid,command | grep grip | grep -v grep | awk '{print $1}')
}

function wrapcfg() {
    __pd=`pwd`;
    cd $HOME;
    /usr/bin/git --git-dir=$HOME/.cfg --work-tree=$HOME "$@";
    cd $__pd;
}

function prefs() {
    if [ -z $1 ]
    then
        $EDITOR $HOME/.bashrc
    else
        bash_files=$(echo $BASHFILES | tr ":" "\n")
        if [[ $bash_files =~ $1 ]]
        then
            $EDITOR $HOME/.bash$1
        else
            echo "ERROR: $1 is not a valid option!";
        fi
    fi
}

function hs() {
history | `which fzf` | awk '{gsub ("^[0123456789 ]+", "", $0); print}'  | bash -
}

function j() {
    if [[ "$#" -ne 0 ]]; then
        cd $(autojump $@)
        return
    fi
    cd "$(autojump -s | sed '/_____/Q; s/^[0-9,.:]*\s*//' |  fzf --height 40% --reverse --inline-info)" 
}

function chefsyntax() {
    for item in `ls -1 cookbooks/*/recipes/*.rb`
    do
      if ! ruby -c $item > /dev/null 2>&1
      then 
        echo -e "\033[1;4m$item\033[0m"
        ruby -c $item
      fi
    done
}

function git-prune() {
  if [[ -n "$1" ]]
  then
    if [ "$1" == "-y" ]
    then
      git remote prune origin
      return
    fi
  fi
  git remote prune origin --dry-run
}

repos() {
  local user="${1?}"
  shift 1
  paginate hub api -t graphql -f user="$user" "$@" -f query='
    query($user: String!, $per_page: Int = 100, $after: String) {
      user(login: $user) {
        repositories(first: $per_page, after: $after) {
          nodes {
            nameWithOwner
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }
    }
  '
}

paginate() {
  local output cursor
  output="$("$@")"
  cursor="$(awk '/\.hasNextPage/ { has_next=$2 } /\.endCursor/ { if (has_next=="true") print $2 }' <<<"$output")"
  printf "%s\n" "$output"
  [ -z "$cursor" ] || paginate "$@" -f after="$cursor"
}

hub-user() {
  hub api --flat user | grep .login | awk '/.login/ {print $2}'
}

function repolist() {
  repos "$(hub-user)" | awk '/\.nameWithOwner\t/ { print $2 }'
}
