#!/bin/bash
DOCKER_YUM_REPO="https://download.docker.com/linux/centos/docker-ce.repo"

RIPGREP_DOWNLOAD_URL="https://github.com/BurntSushi/ripgrep/releases/download/0.10.0/ripgrep-0.10.0-x86_64-unknown-linux-musl.tar.gz";
CHEFDK_DOWNLOAD_URL="https://packages.chef.io/files/stable/chefdk/3.8.14/el/7/chefdk-3.8.14-1.el7.x86_64.rpm"
RUSTUP_DOWNLOAD_URL="https://sh.rustup.rs"
LINUXBREW_DOWNLOAD_URL="https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh"

LINUX_DISTRO=$(cat /etc/*release | grep "^ID=" | sed -E "s/ID=//g")

function _install_yubikey_manager {
    sudo ${PACKAGE_TOOL} install -y ${YUBIKEY_LIBRARIES}
    sudo pip3 install yubikey-manager
}


if [[ $LINUX_DISTRO = "debian" ]]
then
    DEVELOPMENT_TOOLS="build-essential"
    ADD_REPO_TOOL="add-apt-repository"
    GROUP_PACKAGE_TOOL="apt-get install"
    PACKAGE_TOOL="apt-get"
    DOCKER_LIBRARIES="device-mapper-persistent-data lvm2"
    DEVELOPMENT_LIBRARIES="curl wget unzip gcc zlib1g zlib1g-dev libffi-dev openssl libssl-dev python-dev libxml2-dev libxslt-dev git libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev libffi-dev uuid-dev ca-certificates bzip2 libsqlite3-dev libbz2-dev libffi-dev libdb-dev libreadline-dev ";
    YUBIKEY_LIBRARIES="swig libpcsclite-dev pcscd"

elif [[ $LINUX_DISTRO = "centos" ]]
then
    DEVELOPMENT_TOOLS="Development Tools"
    ADD_REPO_TOOL="yum-config-manager --add-repository"
    GROUP_PACKAGE_TOOL="yum groupinstall"
    PACKAGE_TOOL="yum"
    DOCKER_LIBRARIES="yum-utils device-mapper-persistent-data lvm2"
    DEVELOPMENT_LIBRARIES="gcc gcc-c++ zlib zlib-devel libffi-devel openssl openssl-devel python-devel qt-devel qt qt-webkit-devel libxml2-devel libxslt-devel rpmdevtools python-pip curl git";
    YUBIKEY_LIBRARIES="swig libpcsclite-dev pcscd"
fi


function isallowed { 
  if hash "$@" 2>/dev/null 
  then 
    echo 1;
  else
    echo 0;
  fi
}


PYTHON3_INSTALLED=$(isallowed python3);
PIP3_INSTALLED=$(isallowed pip3);
CHEF_INSTALLED=$(isallowed chef);
DOCKER_INSTALLED=$(isallowed docker);
echo "Linux Distro is $LINUX_DISTRO"

echo -e "Installing Development Group \e[90m"
sudo $GROUP_PACKAGE_TOOL -y $DEVELOPMENT_TOOLS
echo -e "\e[37m"

echo -e "Installing git commandline completion\e[90m"
mkdir -p ~/.local/share
wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O ~/.local/share/git-completion.bash
echo 'source $HOME/.local/share/git-completion.bash' >> ~/.bash_completions
echo -e "\e[37m"


echo -e "Installing Curl and Unzip \e[90m"
sudo $PACKAGE_TOOL install -y curl unzip
echo -e "\e[37m"

echo "===============================";
read -r -p "Install dev utils? [y/N] " installDev
if [[ "$installDev" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	echo -e "Installing development libraries\e[90m";
    sudo $PACKAGE_TOOL install -y $DEVELOPMENT_LIBRARIES;
	echo -e "\e[37mInstalling development tools\e[90m";
    sudo $PACKAGE_TOOL install -y cmake git htop;

    echo -e "\e[37mInstalling Ripgrep v0.10.0\e[90m";
    mkdir /tmp/ripgrep;
    cd /tmp/ripgrep || (echo "Failed going to /tmp/ripgrep"; exit);
    wget $RIPGREP_DOWNLOAD_URL;
    _rg_filename=${RIPGREP_DOWNLOAD_URL##*/};
    _rg_basename_tar=${_rg_filename%.*};
    _rg_basename=${_rg_basename_tar%.*};
    tar -xvzf $_rg_filename;
    cd $_rg_basename || (echo "Failed going to $_rg_basename"; exit);
    cp rg $HOME/bin/;
    cd /tmp || (echo "Failed going to /tmp"; exit);
    rm -rf /tmp/ripgrep;
     
    echo -e "\e[37m";

    echo -e "\e[37mInstalling zoxide\e[90m";
    curl -sS https://webinstall.dev/zoxide | bash
    eval "$(zoxide init bash)"
    echo 'eval "$(zoxide init bash)"' >> ~/.bash_completions


    echo -e "\e[37mInstalling fzf\e[90m";
    sudo $PACKAGE_TOOL install -y fzf

    echo -e "\e[37m";

    echo -e "\e[37mInstalling Github Hub\e[90m";
    sudo $PACKAGE_TOOL install -y hub

    echo -e "\e[37m";


    echo -e "\e[37mInstalling aws-cli\e[90m";
    cd /tmp
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip -qq awscliv2.zip
    sudo ./aws/install
    rm -rf awscliv2.zip ./aws
    cd $HOME

    echo -e "\e[37mInstalling aws-vault\e[90m";
    curl -s https://api.github.com/repos/99designs/aws-vault/releases/latest \
            | grep "browser_download_url" \
            | grep "aws-vault-linux-amd64" \
            | cut -d : -f 2,3 | tr -d \" \
            | wget -qi -
    sudo cp ./aws-vault-linux-amd64 /usr/bin/aws-vault

    echo -e "\e[37m";

    echo -e "\e[37mInstalling lucagrulla cw\e[90m";
    curl -s https://api.github.com/repos/lucagrulla/cw/releases/latest \
            | grep "browser_download_url" \
            | grep "cw_amd64.deb" \
            | cut -d : -f 2,3 | tr -d \" \
            | wget -qi -
    sudo dpkg -i ./cw_amd64.deb
    rm -rf cw_amd64.deb

    echo -e "\e[37m";

    read -r -p "Install Chef Dk? [y/N] " installChefDK
    if [[ "$installChefDK" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        cd /tmp || (echo "Failed going to /tmp"; exit);
        wget $CHEFDK_DOWNLOAD_URL;
        echo -e "\e[37mInstalling ChefDK\e[90m";
        sudo $PACKAGE_TOOL install -y ${CHEFDK_DOWNLOAD_URL##*/};
        rm -rf ${CHEFDK_DOWNLOAD_URL##*/};
        CHEF_INSTALLED=$(isallowed chef);
    fi

    echo -e "\e[37m";
    read -r -p "Install Docker? [y/N] " installDocker
    if [[ "$installDocker" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        sudo $PACKAGE_TOOL install -y $DOCKER_LIBRARIES;
        sudo $GROUP_PACKAGE_TOOL $DOCKER_YUM_REPO;
        sudo $PACKAGE_TOOL install -y docker-ce docker-ce-cli containerd.io;
        DOCKER_INSTALLED=$(isallowed docker);
    fi

    read -r -p "Install Test-Kitchen Docker? [y/N] " installTestKitchen
    if [[ "$installTestKitchen" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        if [ $CHEF_INSTALLED ] && [ $DOCKER_INSTALLED ]
        then
            sudo chef gem install kitchen-docker
            echo "Do!";
        else
            echo -e "\e[31mERROR: Test-Kitchen requires Chef & Docker installed";
        fi
    fi
	echo -e "\e[37m";
fi

read -r -p "Install Rust to home directory? [y/N] " installRustHome
if [[ "$installRustHome" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    echo -e "Installing development libraries\e[90m";
    sudo $PACKAGE_TOOL -y install $DEVELOPMENT_LIBRARIES;
    if isallowed rustup
    then
    	echo -e "\e[37mDownloading RustUp\e[90m";
        curl --proto '=https' --tlsv1.2 -sSf $RUSTUP_DOWNLOAD_URL | sh -s -- -y;
    fi
    echo 'source $HOME/.cargo/env' >> ~/.bash_completions
    source $HOME/.cargo/env
    rustup update;
    echo -e "\e[37m";
fi

read -r -p "Install LinuxBrew to home directory? [y/N] " installLinuxBrewHome
if [[ "$installLinuxBrewHome" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    if ! isallowed brew
    then
    	echo -e "\e[37mDownloading LinuxBrew\e[90m";
        sh -c "$(curl -fsSL $LINUXBREW_DOWNLOAD_URL)"
        test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
        test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
        echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
    fi
    echo -e "\e[37m";
fi

read -r -p "Install Python3 to home directory? [y/N] " installPy3Home
if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	echo -e "Installing development libraries\e[90m";
	sudo $PACKAGE_TOOL -y install $DEVELOPMENT_LIBRARIES;
    for pkg in build-essential zlib1g-dev libbz2-dev liblzma-dev libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev libgdbm-dev liblzma-dev tk8.5-dev lzma lzma-dev libgdbm-dev uuid-dev libgdbm-compat-dev libffi-dev
    do
        sudo apt-get -y install $pkg
    done
	mkdir /tmp/python3_build;
	cd /tmp/python3_build || (echo "Failed going to /tmp/python3_build"; exit);
	echo -e "\e[37mDownloading Python3.7.12\e[90m";
	wget https://www.python.org/ftp/python/3.7.12/Python-3.7.12.tar.xz;
	tar -xf Python-3.7.12.tar.xz;
	cd Python-3.7.12 || (echo "Failed going to Python-3.7.12"; exit);
	echo -e "\e[37mBuilding Python3\e[90m";
	./configure --prefix=$HOME --enable-optimizations;
	sudo make -j 8;
	sudo make install;

	# Link libs
	ln -s /usr/lib64/libpython2.7.so.1.0 /usr/lib64/libpython2.7.so
    PYTHON3_INSTALLED=$(isallowed python3);
    python3 -m ensurepip --upgrade

    sudo rm -rf /tmp/python3_build
    cd $HOME
	echo -e "\e[37m";
fi

read -r -p "Install PySide? [y/N] " installPySide
if [[ "$installPySide" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	# Pyside
	echo -e "Installing PySide for Python2 (System)\e[90m";
	sudo $PACKAGE_TOOL install -y python-pyside shiboken shiboken-python2-libs shiboken-python2-devel;
	# pip2 install wheel;
	# cd /tmp;
	# mkdir pyside_build;
	# cd pyside_build;
	# wget $PYSIDE_DOWNLOAD_URL;
	# tar -xvzf ${PYSIDE_DOWNLOAD_URL##*/};
	# cd ${PYSIDE_DOWNLOAD_URL%.*};
	# python2.7 setup.py bdist_wheel --qmake=/usr/bin/qmake-qt4 --standalone;
	
	if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]] || [ $PYTHON3_INSTALLED ]
	then
		echo -e "\e[37mInstalling PySide2 for Python3 (HomeDir)\e[90m";		
		pip3 install PySide2;
	fi
	echo -e "\e[37m";
fi

read -r -p "Install Powerline? [y/N] " installPowerline
if [[ "$installPowerline" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	# install powerline
	if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]] || [ $PYTHON3_INSTALLED ]
	then
        $HOME/bin/pip3 install powerline-status;
        echo "Now git clone"
        git clone https://github.com/powerline/fonts.git;
        echo $PWD
		cd fonts || (echo "Failed going to fonts"; exit);
		sudo ./install.sh;
	else
		echo -e "\e[31mERROR: Powerline requires Python3 installed";
	fi

	echo -e "\e[37m";
fi

echo -e "\e[37mInstalling yubikey_manager\e[90m";
_install_yubikey_manager;
echo -e "\e[37m";
