#!/bin/bash
DOCKER_YUM_REPO="https://download.docker.com/linux/centos/docker-ce.repo"

RIPGREP_DOWNLOAD_URL="https://github.com/BurntSushi/ripgrep/releases/download/0.10.0/ripgrep-0.10.0-x86_64-unknown-linux-musl.tar.gz";
CHEFDK_DOWNLOAD_URL="https://packages.chef.io/files/stable/chefdk/3.8.14/el/7/chefdk-3.8.14-1.el7.x86_64.rpm"
RUSTUP_DOWNLOAD_URL="https://sh.rustup.rs"
LINUXBREW_DOWNLOAD_URL="https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh"

LINUX_DISTRO=$(cat /etc/*release | grep "^ID=" | sed -E "s/ID=//g")

function _install_yubikey_manager {
    ${PACKAGE_TOOL} install ${YUBIKEY_LIBRARIES}
    pip3 install yubikey-manager
}


if [[ $LINUX_DISTRO = "debian" ]]
then
    DEVELOPMENT_TOOLS="build-essential"
    ADD_REPO_TOOL="add-apt-repository"
    GROUP_PACKAGE_TOOL="apt-get install"
    PACKAGE_TOOL="apt-get"
    DOCKER_LIBRARIES="device-mapper-persistent-data lvm2"
    DEVELOPMENT_LIBRARIES="gcc gcc-c++ zlib zlib-dev libffi-dev openssl openssl-dev python-dev qt-dev qt qt-webkit-dev libxml2-dev libxslt-dev rpmdevtools python-pip curl git libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev libffi-dev uuid-dev";
    YUBIKEY_LIBRARIES="swig libpcsclite-dev pcscd"

elif [[ $LINUX_DISTRO = "centos" ]]
then
    DEVELOPMENT_TOOLS="Development Tools"
    ADD_REPO_TOOL="yum-config-manager --add-repository"
    GROUP_PACKAGE_TOOL="yum groupinstall"
    PACKAGE_TOOL="yum"
    DOCKER_LIBRARIES="yum-utils device-mapper-persistent-data lvm2"
    DEVELOPMENT_LIBRARIES="gcc gcc-c++ zlib zlib-devel libffi-devel openssl openssl-devel python-devel qt-devel qt qt-webkit-devel libxml2-devel libxslt-devel rpmdevtools python-pip curl git";
    YUBIKEY_LIBRARIES="swig libpcsclite-dev pcscd"
fi


function isallowed { 
  if hash "$@" 2>/dev/null 
  then 
    echo 1;
  else
    echo 0;
  fi
}


PYTHON3_INSTALLED=$(isallowed python3);
PIP3_INSTALLED=$(isallowed pip3);
CHEF_INSTALLED=$(isallowed chef);
DOCKER_INSTALLED=$(isallowed docker);
echo "Linux Distro is $LINUX_DISTRO"

echo -e "Installing Development Group \e[90m"
sudo $GROUP_PACKAGE_TOOL -y $DEVELOPMENT_TOOLS
echo -e "\e[37m"

echo "===============================";
read -r -p "Install dev utils? [y/N] " installDev
if [[ "$installDev" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	echo -e "Installing development libraries\e[90m";
    sudo $PACKAGE_TOOL install -y $DEVELOPMENT_LIBRARIES;
	echo -e "\e[37mInstalling development tools\e[90m";
    sudo $PACKAGE_TOOL install -y cmake git htop;

    echo -e "\e[37mInstalling Ripgrep v0.10.0\e[90m";
    mkdir /tmp/ripgrep;
    cd /tmp/ripgrep || (echo "Failed going to /tmp/ripgrep"; exit);
    wget $RIPGREP_DOWNLOAD_URL;
    _rg_filename=${RIPGREP_DOWNLOAD_URL##*/};
    _rg_basename_tar=${_rg_filename%.*};
    _rg_basename=${_rg_basename_tar%.*};
    tar -xvzf $_rg_filename;
    cd $_rg_basename || (echo "Failed going to $_rg_basename"; exit);
    cp rg $HOME/bin/;
    cd /tmp || (echo "Failed going to /tmp"; exit);
    rm -rf /tmp/ripgrep;
     
    echo -e "\e[37m";

    read -r -p "Install Chef Dk? [y/N] " installChefDK
    if [[ "$installChefDK" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        cd /tmp || (echo "Failed going to /tmp"; exit);
        wget $CHEFDK_DOWNLOAD_URL;
        echo -e "\e[37mInstalling ChefDK\e[90m";
        sudo $PACKAGE_TOOL install -y ${CHEFDK_DOWNLOAD_URL##*/};
        rm -rf ${CHEFDK_DOWNLOAD_URL##*/};
        CHEF_INSTALLED=$(isallowed chef);
    fi

    echo -e "\e[37m";
    read -r -p "Install Docker? [y/N] " installDocker
    if [[ "$installDocker" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        sudo $PACKAGE_TOOL install -y $DOCKER_LIBRARIES;
        sudo $GROUP_PACKAGE_TOOL $DOCKER_YUM_REPO;
        sudo $PACKAGE_TOOL install -y docker-ce docker-ce-cli containerd.io;
        DOCKER_INSTALLED=$(isallowed docker);
    fi

    read -r -p "Install Test-Kitchen Docker? [y/N] " installTestKitchen
    if [[ "$installTestKitchen" =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        if [ $CHEF_INSTALLED ] && [ $DOCKER_INSTALLED ]
        then
            sudo chef gem install kitchen-docker
            echo "Do!";
        else
            echo -e "\e[31mERROR: Test-Kitchen requires Chef & Docker installed";
        fi
    fi
	echo -e "\e[37m";
fi

read -r -p "Install Rust to home directory? [y/N] " installRustHome
if [[ "$installRustHome" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    echo -e "Installing development libraries\e[90m";
    sudo $PACKAGE_TOOL -y install $DEVELOPMENT_LIBRARIES;
    if ! isallowed rustup
    then
    	echo -e "\e[37mDownloading RustUp\e[90m";
        curl --proto '=https' --tlsv1.2 -sSf $RUSTUP_DOWNLOAD_URL | sh;
    fi
    rustup update;
    echo -e "\e[37m";
fi

read -r -p "Install LinuxBrew to home directory? [y/N] " installLinuxBrewHome
if [[ "$installLinuxBrewHome" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    if ! isallowed brew
    then
    	echo -e "\e[37mDownloading LinuxBrew\e[90m";
        sh -c "$(curl -fsSL $LINUXBREW_DOWNLOAD_URL)"
        test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
        test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
        echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
    fi
    echo -e "\e[37m";
fi

read -r -p "Install Python3 to home directory? [y/N] " installPy3Home
if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	echo -e "Installing development libraries\e[90m";
	sudo $PACKAGE_TOOL -y install $DEVELOPMENT_LIBRARIES;
	mkdir /tmp/python3_build;
	cd /tmp/python3_build || (echo "Failed going to /tmp/python3_build"; exit);
	echo -e "\e[37mDownloading Python3.7.11\e[90m";
	wget https://www.python.org/ftp/python/3.7.11/Python-3.7.11.tar.xz;
	tar -xf Python-3.7.11.tar.xz;
	cd Python-3.7.11 || (echo "Failed going to Python-3.7.11"; exit);
	echo -e "\e[37mBuilding Python3\e[90m";
	./configure --prefix=$HOME --enable-optimizations;
	sudo make -j 8;
	sudo make install;

	# Link libs
	ln -s /usr/lib64/libpython2.7.so.1.0 /usr/lib64/libpython2.7.so
    PYTHON3_INSTALLED=$(isallowed python3);
	echo -e "\e[37m";
fi

read -r -p "Install PySide? [y/N] " installPySide
if [[ "$installPySide" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	# Pyside
	echo -e "Installing PySide for Python2 (System)\e[90m";
	sudo $PACKAGE_TOOL install -y python-pyside shiboken shiboken-python2-libs shiboken-python2-devel;
	# pip2 install wheel;
	# cd /tmp;
	# mkdir pyside_build;
	# cd pyside_build;
	# wget $PYSIDE_DOWNLOAD_URL;
	# tar -xvzf ${PYSIDE_DOWNLOAD_URL##*/};
	# cd ${PYSIDE_DOWNLOAD_URL%.*};
	# python2.7 setup.py bdist_wheel --qmake=/usr/bin/qmake-qt4 --standalone;
	
	if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]] || [ $PYTHON3_INSTALLED ]
	then
		echo -e "\e[37mInstalling PySide2 for Python3 (HomeDir)\e[90m";		
		pip3 install PySide2;
	fi
	echo -e "\e[37m";
fi

read -r -p "Install Powerline? [y/N] " installPowerline
if [[ "$installPowerline" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
	# install powerline
	if [[ "$installPy3Home" =~ ^([yY][eE][sS]|[yY])+$ ]] || [ $PYTHON3_INSTALLED ]
	then
		pip3 install powerline-status;
		git clone git@github.com:powerline/fonts.git;
		cd fonts || (echo "Failed going to fonts"; exit);
		./install.sh;
	else
		echo -e "\e[31mERROR: Powerline requires Python3 installed";
	fi

	echo -e "\e[37m";
fi


_install_yubikey_manager;
